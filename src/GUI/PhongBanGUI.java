package GUI;

import BUS.ChucVu_BUS;
import BUS.NhanVienBUS;
import BUS.PhongBanBUS;
import DTO.ChucVu_DTO;
import DTO.NhanVienDTO;
import DTO.PhongBanDTO;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.table.DefaultTableModel;

public class PhongBanGUI extends javax.swing.JPanel {

    JLabel[] listlbphongban;
    String[] listtenphongban;
    //khởi tạo chuỗi chứa các giá trị hiện tại của tf tương ứng, chỉ dùng khi dùng chức năng sửa
    //được khởi tạo giá trị ở hàm ButtonOn
    String currentIDPB, currentName, currentIDNV;
    
    public PhongBanGUI() {
        initComponents();
        rebuildFrame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FrameDSNhanVien = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        lbTenPhong_DSNV = new javax.swing.JLabel();
        spDSNV = new javax.swing.JScrollPane();
        tbDSNV = new javax.swing.JTable();
        pnPhongBan = new javax.swing.JPanel();
        pnTTPhongBan = new javax.swing.JPanel();
        lbTTPhongBan = new javax.swing.JLabel();
        lbMaPhong = new javax.swing.JLabel();
        lbTenPhong = new javax.swing.JLabel();
        lbTenTruongPhong = new javax.swing.JLabel();
        tfIDTruongPhong = new javax.swing.JTextField();
        btnSuaPhongBan = new javax.swing.JButton();
        btnThemPhongBan = new javax.swing.JButton();
        btnXoaPhongBan = new javax.swing.JButton();
        btnXemPhongBan = new javax.swing.JButton();
        tfTenPhong = new javax.swing.JTextField();
        lbtentruongphong = new javax.swing.JLabel();
        tfTenTruongPhong = new javax.swing.JTextField();
        tfIDPhong = new javax.swing.JTextField();
        lbSDTPB = new javax.swing.JLabel();
        tfSdtPhong = new javax.swing.JTextField();
        spPhongBan = new javax.swing.JScrollPane();
        pnDSPhongBan = new javax.swing.JPanel();
        lbDSPhongBan = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        jLabel1.setText("Danh sách nhân viên phòng");

        lbTenPhong_DSNV.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lbTenPhong_DSNV.setText("-1");

        tbDSNV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tên nhân viên", "Chức vụ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbDSNV.setRowHeight(25);
        spDSNV.setViewportView(tbDSNV);
        if (tbDSNV.getColumnModel().getColumnCount() > 0) {
            tbDSNV.getColumnModel().getColumn(0).setMinWidth(50);
            tbDSNV.getColumnModel().getColumn(0).setMaxWidth(50);
            tbDSNV.getColumnModel().getColumn(1).setMinWidth(200);
            tbDSNV.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        javax.swing.GroupLayout FrameDSNhanVienLayout = new javax.swing.GroupLayout(FrameDSNhanVien.getContentPane());
        FrameDSNhanVien.getContentPane().setLayout(FrameDSNhanVienLayout);
        FrameDSNhanVienLayout.setHorizontalGroup(
            FrameDSNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FrameDSNhanVienLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbTenPhong_DSNV)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(FrameDSNhanVienLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spDSNV, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                .addContainerGap())
        );
        FrameDSNhanVienLayout.setVerticalGroup(
            FrameDSNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FrameDSNhanVienLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(FrameDSNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTenPhong_DSNV)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spDSNV, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnTTPhongBan.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbTTPhongBan.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        lbTTPhongBan.setText("Thông tin phòng ban");

        lbMaPhong.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lbMaPhong.setText("Mã phòng");

        lbTenPhong.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lbTenPhong.setText("Tên phòng");

        lbTenTruongPhong.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lbTenTruongPhong.setText("ID trưởng phòng");

        tfIDTruongPhong.setFont(new java.awt.Font("Segoe UI Light", 1, 13)); // NOI18N

        btnSuaPhongBan.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnSuaPhongBan.setText("Sửa");
        btnSuaPhongBan.setEnabled(false);
        btnSuaPhongBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaPhongBanActionPerformed(evt);
            }
        });

        btnThemPhongBan.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnThemPhongBan.setText("Thêm");
        btnThemPhongBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemPhongBanActionPerformed(evt);
            }
        });

        btnXoaPhongBan.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnXoaPhongBan.setText("Xóa");
        btnXoaPhongBan.setEnabled(false);
        btnXoaPhongBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaPhongBanActionPerformed(evt);
            }
        });

        btnXemPhongBan.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnXemPhongBan.setText("Xem");
        btnXemPhongBan.setEnabled(false);
        btnXemPhongBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXemPhongBanActionPerformed(evt);
            }
        });

        tfTenPhong.setFont(new java.awt.Font("Segoe UI Light", 1, 13)); // NOI18N

        lbtentruongphong.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lbtentruongphong.setText("Tên trưởng phòng");

        tfTenTruongPhong.setFont(new java.awt.Font("Segoe UI Light", 1, 13)); // NOI18N
        tfTenTruongPhong.setEnabled(false);

        lbSDTPB.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lbSDTPB.setText("Số điện thoại phòng");

        tfSdtPhong.setFont(new java.awt.Font("Segoe UI Light", 1, 13)); // NOI18N

        javax.swing.GroupLayout pnTTPhongBanLayout = new javax.swing.GroupLayout(pnTTPhongBan);
        pnTTPhongBan.setLayout(pnTTPhongBanLayout);
        pnTTPhongBanLayout.setHorizontalGroup(
            pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTTPhongBanLayout.createSequentialGroup()
                .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnTTPhongBanLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbTTPhongBan))
                    .addGroup(pnTTPhongBanLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbTenPhong)
                            .addComponent(lbMaPhong))
                        .addGap(36, 36, 36)
                        .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfTenPhong, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .addComponent(tfIDPhong))))
                .addGap(45, 45, 45)
                .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbTenTruongPhong)
                    .addComponent(lbtentruongphong)
                    .addComponent(lbSDTPB))
                .addGap(35, 35, 35)
                .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfSdtPhong)
                    .addComponent(tfTenTruongPhong)
                    .addComponent(tfIDTruongPhong))
                .addGap(66, 66, 66)
                .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnXemPhongBan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaPhongBan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnXoaPhongBan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThemPhongBan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );
        pnTTPhongBanLayout.setVerticalGroup(
            pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTTPhongBanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnTTPhongBanLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnThemPhongBan)
                            .addComponent(btnXemPhongBan))
                        .addGap(18, 18, 18)
                        .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnXoaPhongBan)
                            .addComponent(btnSuaPhongBan)))
                    .addGroup(pnTTPhongBanLayout.createSequentialGroup()
                        .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbTTPhongBan)
                            .addComponent(lbtentruongphong)
                            .addComponent(tfTenTruongPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbTenPhong)
                            .addComponent(tfTenPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTenTruongPhong)
                            .addComponent(tfIDTruongPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnTTPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMaPhong)
                            .addComponent(tfIDPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbSDTPB)
                            .addComponent(tfSdtPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        spPhongBan.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        pnDSPhongBan.setPreferredSize(new java.awt.Dimension(1060, 1560));

        javax.swing.GroupLayout pnDSPhongBanLayout = new javax.swing.GroupLayout(pnDSPhongBan);
        pnDSPhongBan.setLayout(pnDSPhongBanLayout);
        pnDSPhongBanLayout.setHorizontalGroup(
            pnDSPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1072, Short.MAX_VALUE)
        );
        pnDSPhongBanLayout.setVerticalGroup(
            pnDSPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1560, Short.MAX_VALUE)
        );

        spPhongBan.setViewportView(pnDSPhongBan);

        lbDSPhongBan.setFont(new java.awt.Font("Segoe UI Light", 1, 24)); // NOI18N
        lbDSPhongBan.setText("Danh sách phòng ban");

        javax.swing.GroupLayout pnPhongBanLayout = new javax.swing.GroupLayout(pnPhongBan);
        pnPhongBan.setLayout(pnPhongBanLayout);
        pnPhongBanLayout.setHorizontalGroup(
            pnPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPhongBanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbDSPhongBan)
                    .addComponent(pnTTPhongBan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spPhongBan, javax.swing.GroupLayout.DEFAULT_SIZE, 1086, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnPhongBanLayout.setVerticalGroup(
            pnPhongBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPhongBanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbDSPhongBan)
                .addGap(18, 18, 18)
                .addComponent(spPhongBan, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnTTPhongBan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnPhongBan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnPhongBan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void rebuildFrame() {
        // Khởi tạo panel FlowLayout chứa các Label dự án
        pnDSPhongBan.setLayout(new FlowLayout(FlowLayout.CENTER, 120, 40));
        initPhongBan();
    }
    
    
    /**
    * Xu ly su kien
    **/
    // <editor-fold defaultstate="collapsed" desc="Event Handling">   
    
    public int getIndexphongban() {
        String name = "";
        int index = -1;
        for(int i=0; i<listtenphongban.length; i++)
            //miễn đúng tên phòng ban chứ chưa xét đến việc visible = 0 hay chưa
            if (listtenphongban[i].substring(listtenphongban[i].length()-1).equals("1")) {
                name = PhongBanBUS.dspb.get(i).getTenphongban();
                break;
            }
        //bắt đầu xét phòng ban có visible = 0 thì bỏ qua không lấy index
        for(int i=0; i<PhongBanBUS.dspb.size(); i++) 
            if (name.equals(PhongBanBUS.dspb.get(i).tenphongban) && PhongBanBUS.dspb.get(i).visible == 1) {
                index = i;
                break;
            }
        return index;
    }
    
    //Xóa sạch Label dự án trên danh sách
    public void removePhongBan() {
        for(JLabel pb:listlbphongban) 
            pnDSPhongBan.remove(pb);
    }
    
    //Khởi tạo lại các Label dự án dựa trên ArrayList ở PhongBanBUS
    public void initPhongBan() {
        try {
            if (PhongBanBUS.dspb == null || PhongBanBUS.dspb.isEmpty()) new PhongBanBUS().docDSPB();
            int size = PhongBanBUS.dspb.size();
            int num, count = 0;
            int i = 0;
            listlbphongban = new JLabel[size];
            listtenphongban = new String[size];
            //Chỉnh sửa lại chiều cao của panel tùy theo số lượng dự án
            for (PhongBanDTO pb:PhongBanBUS.dspb)
                if (pb.visible == 0) count++;
            num = size - count; 
            if (num%2 == 0) pnDSPhongBan.setPreferredSize(new Dimension(920, num / 2 * (40 + 220)));
            else if (num%2 != 0) pnDSPhongBan.setPreferredSize(new Dimension(920, (num / 2 + 1) * (40 + 220)));
            //Thêm dự án vào panel
            for(PhongBanDTO pb:PhongBanBUS.dspb) {
                JLabel lbphongban = new JLabel(pb.tenphongban);
                lbphongban.setPreferredSize(new Dimension(360, 220));
                lbphongban.setFont(new Font("Serif", Font.BOLD, 20));
                lbphongban.setHorizontalAlignment(JLabel.CENTER);
                lbphongban.setVerticalAlignment(JLabel.TOP);
                lbphongban.setBackground(Color.gray);
                lbphongban.setOpaque(true);
                lbphongban.setBorder(BorderFactory.createLineBorder(Color.black, 2));
                listlbphongban[i] = lbphongban;
                listtenphongban[i] = pb.tenphongban + "0";
                if (pb.visible != 0) pnDSPhongBan.add(listlbphongban[i]);    
                i++;
            }
            addMouseEvent();  
            addCaretEvent();
        } catch (Exception e) {
            System.out.println(e);
        }  
    }
    
    
    private void btnSuaPhongBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaPhongBanActionPerformed
        try {
            if (checkField(2)) {
                PhongBanBUS pb = new PhongBanBUS();
                String idpb = "";
                String tenpb = "";
                String idnv = "";
                String sdt = "";
                idpb = tfIDPhong.getText().trim();
                tenpb = tfTenPhong.getText().trim();
                idnv = tfIDTruongPhong.getText().trim();
                sdt = tfSdtPhong.getText().trim();
                pb.suaPB(getIndexphongban(), currentIDPB, currentIDNV, idpb, tenpb, idnv, sdt);
                removePhongBan();
                initPhongBan();
                pnPhongBan.validate();
            }
        } catch (Exception ex) {
            Logger.getLogger(PhongBanGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSuaPhongBanActionPerformed

    private void btnXemPhongBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXemPhongBanActionPerformed
            try {
                DefaultTableModel model = (DefaultTableModel) tbDSNV.getModel();
                int index = getIndexphongban();
                //reset lại model của đợt xemt trước đó
                for (int j=0; j<model.getRowCount(); j++)
                    model.removeRow(j);
                lbTenPhong_DSNV.setText(PhongBanBUS.dspb.get(index).getTenphongban());
                if (NhanVienBUS.dsnv == null || NhanVienBUS.dsnv.isEmpty()) new NhanVienBUS().docDSNV();
                if (ChucVu_BUS.dscv == null || ChucVu_BUS.dscv.isEmpty()) new ChucVu_BUS().docDSCV();
                for (NhanVienDTO nv:NhanVienBUS.dsnv) {
                    if (PhongBanBUS.dspb.get(index).getID_phongban().equals(nv.id_phongban)) {
                        Vector row = new Vector();
                        row.add(nv.id);
                        row.add(nv.name);
                        for (ChucVu_DTO cv:ChucVu_BUS.dscv) 
                            if (nv.id_chucvu == cv.ID_chucvu) {
                                //kiểm tra nếu tên nhân viên trùng tên trưởng phòng thì gắn thêm chức vụ trưởng phòng ban vào
                                if (nv.id.equals(tfIDTruongPhong.getText())) row.add(cv.tenchucvu + ", Trưởng phòng phòng " + lbTenPhong_DSNV.getText());
                                else row.add(cv.tenchucvu);
                                break;
                            }
                        model.addRow(row);
                    }
                }
                tbDSNV.setModel(model);
            } catch (Exception ex) {
                Logger.getLogger(PhongBanGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        FrameDSNhanVien.setTitle("Danh sách nhân viên");
        FrameDSNhanVien.pack();
        FrameDSNhanVien.setVisible(true);
    }//GEN-LAST:event_btnXemPhongBanActionPerformed

    private void btnThemPhongBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemPhongBanActionPerformed
        try {
            if (checkField(1)) {
                PhongBanBUS pb = new PhongBanBUS();
                String idpb = "";
                String tenpb = "";
                String idnv = "";
                String sdt = "";
                idpb = tfIDPhong.getText().trim();
                tenpb = tfTenPhong.getText().trim();
                idnv = tfIDTruongPhong.getText().trim();
                sdt = tfSdtPhong.getText().trim();
                pb.themPB(idpb, tenpb, idnv, sdt);
                removePhongBan();
                initPhongBan();
                pnPhongBan.validate();
            }
        } catch (Exception ex) {
            Logger.getLogger(PhongBanGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnThemPhongBanActionPerformed

    private void btnXoaPhongBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaPhongBanActionPerformed
        try {
            new PhongBanBUS().xoaPB(getIndexphongban());
            removePhongBan();
            initPhongBan();
            pnPhongBan.validate();
            ButtonOff();
        } catch (Exception ex) {
            Logger.getLogger(PhongBanGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnXoaPhongBanActionPerformed
    
    //Check Field có trống hay không
    private boolean checkField(int i) throws Exception {
        if (i == 1) {
            if (tfTenPhong.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên phòng", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (tfIDPhong.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập mã phòng", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (tfIDTruongPhong.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập ID trưởng phòng", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (tfSdtPhong.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập số điện thoại phòng", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            //check trùng mã phòng và tên phòng
            if (!tfIDPhong.getText().equals("") || !tfTenPhong.getText().equals(""))
            for (PhongBanDTO pb:PhongBanBUS.dspb) {
                if (tfIDPhong.getText().trim().toLowerCase().equals(pb.ID_phongban.toLowerCase())) {
                    JOptionPane.showMessageDialog(null, "Mã phòng bị trùng, vui lòng nhập lại!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                //chỉ check trùng tên phòng với những tên phòng có visible = 1
                if (tfTenPhong.getText().trim().toLowerCase().equals(pb.tenphongban.toLowerCase()) && pb.visible == 1) {
                    JOptionPane.showMessageDialog(null, "Tên phòng bị trùng, vui lòng nhập lại!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
            //check mã nv không hợp lệ hoặc nhân viên đã thuộc phòng ban khác
            if (!tfIDTruongPhong.getText().trim().equals("")) {
                try {
                    int num = Integer.parseInt(tfIDTruongPhong.getText().trim());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Mã nhân viên không hợp lệ", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                for (NhanVienDTO nv:NhanVienBUS.dsnv) {
                    if (tfIDTruongPhong.getText().trim().equals(nv.id) && nv.id_phongban == null) return true;
                    if (tfIDTruongPhong.getText().trim().equals(nv.id) && nv.id_phongban != null) {
                        JOptionPane.showMessageDialog(null, "Nhân viên đã thuộc phòng ban khác", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
                JOptionPane.showMessageDialog(null, "Nhân viên không tồn tại", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        
        if (i == 2) {
            if (tfTenPhong.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên phòng", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (tfIDPhong.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập mã phòng", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (tfSdtPhong.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập số điện thoại phòng", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            //check trùng mã phòng và tên phòng
            if (!tfIDPhong.getText().equals("") || !tfTenPhong.getText().equals("")) {
                //kiểm tra xem có sự thay đổi trên các test field không nếu có thay đổi thì mới check tiếp
                if (!currentIDPB.equals(tfIDPhong.getText().trim())) {
                    //Kiểm tra xem có nhân viên nào thuộc phòng này không nếu có cấm cho thay đổi mã phòng
                    for (NhanVienDTO nv:NhanVienBUS.dsnv) {
                        try {if (nv.id_phongban.equals(currentIDPB)) {
                            JOptionPane.showMessageDialog(null, "Phòng ban còn nhân viên, không cho đổi mã phòng!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                            return false;
                        } } catch (Exception e) {}
                    }
                    for (PhongBanDTO pb:PhongBanBUS.dspb) {
                        if (tfIDPhong.getText().trim().toLowerCase().equals(pb.ID_phongban.toLowerCase())) {
                            JOptionPane.showMessageDialog(null, "Mã phòng bị trùng, vui lòng nhập lại!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                            return false;
                        }
                    }
                }
                //kiểm tra xem có sự thay đổi trên các test field không nếu có thay đổi thì mới check tiếp
                if (!currentName.equals(tfTenPhong.getText().trim()))
                for (PhongBanDTO pb:PhongBanBUS.dspb) {
                    //chỉ check trùng tên phòng với những tên phòng có visible = 1
                    if (tfTenPhong.getText().trim().toLowerCase().equals(pb.tenphongban.toLowerCase()) && pb.visible == 1) {
                        JOptionPane.showMessageDialog(null, "Tên phòng bị trùng, vui lòng nhập lại!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
            }
            //check mã nv không hợp lệ hoặc nhân viên đã thuộc phòng ban khác
            if (!tfIDTruongPhong.getText().trim().equals("")) 
            //kiểm tra xem có sự thay đổi trên các test field không nếu có thay đổi thì mới check tiếp
            if (!currentIDNV.equals(tfIDTruongPhong.getText().trim())) {
                try {
                    int num = Integer.parseInt(tfIDTruongPhong.getText().trim());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Mã nhân viên không hợp lệ", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                for (NhanVienDTO nv:NhanVienBUS.dsnv) {
                    if (tfIDTruongPhong.getText().trim().equals(nv.id) && nv.id_phongban == null) return true;
                    if (tfIDTruongPhong.getText().trim().equals(nv.id) && nv.id_phongban != null) {
                        JOptionPane.showMessageDialog(null, "Nhân viên đã thuộc phòng ban khác", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
                JOptionPane.showMessageDialog(null, "Nhân viên không tồn tại", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }
    
    //Event caretUpdate trên tfIDTruongphong giúp textfield Tên trưởng phòng liên tục cập nhật
    private void addCaretEvent(){
        tfIDTruongPhong.addCaretListener(new CaretListener() {
            public void caretUpdate(CaretEvent e) {
                try {
                    if (NhanVienBUS.dsnv == null || NhanVienBUS.dsnv.isEmpty()) new NhanVienBUS().docDSNV();
                } catch (Exception ex) {
                    Logger.getLogger(PhongBanGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (NhanVienDTO nv:NhanVienBUS.dsnv)
                    if (tfIDTruongPhong.getText().trim().equals(nv.id)) tfTenTruongPhong.setText(nv.name);
            }
        });
    }
    
    //Chuyển đổi màu của thẻ đang được click
    private void changeColor() {
        for(int i=0; i<listlbphongban.length; i++) {
            if (listtenphongban[i].substring(listtenphongban[i].length()-1).equals("1")) {
                listlbphongban[i].setBackground(Color.green);
            }
            else listlbphongban[i].setBackground(Color.gray);
        }
    }
    
    //Event này disable nút xem, sửa, xóa nếu chưa có panel nào được click;
    //Đồng thời hiển thị thông tin phòng ban lên form
    public void ButtonOn(){
        int index = getIndexphongban();
            tfTenPhong.setText(PhongBanBUS.dspb.get(index).tenphongban);
            tfIDPhong.setText(PhongBanBUS.dspb.get(index).ID_phongban);
            try {
                if (NhanVienBUS.dsnv == null || NhanVienBUS.dsnv.isEmpty()) new NhanVienBUS().docDSNV();
            } catch (Exception ex) {
                Logger.getLogger(PhongBanGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                for (NhanVienDTO nv:NhanVienBUS.dsnv)
                    if (tfIDTruongPhong.getText().trim().equals(nv.id)) tfTenTruongPhong.setText(nv.name);
                    else tfTenTruongPhong.setText("");
                tfIDTruongPhong.setText(PhongBanBUS.dspb.get(index).ID_truongphong);
            } catch (NullPointerException e) {
                tfTenTruongPhong.setText("");
                tfIDTruongPhong.setText("");
            }
            tfSdtPhong.setText(PhongBanBUS.dspb.get(index).sdt_phongban);
            currentIDPB = tfIDPhong.getText().trim();
            currentName = tfTenPhong.getText().trim();
            currentIDNV = tfIDTruongPhong.getText().trim();
        
        
            btnXemPhongBan.setEnabled(true);
            btnSuaPhongBan.setEnabled(true);
            btnXoaPhongBan.setEnabled(true);
    }
        
    //Làm trống form
    public void ButtonOff() {
        tfTenPhong.setText("");
        tfIDPhong.setText("");
        tfTenTruongPhong.setText("");
        tfIDTruongPhong.setText("");
        tfSdtPhong.setText("");
        
        btnXemPhongBan.setEnabled(false);
        btnSuaPhongBan.setEnabled(false);
        btnXoaPhongBan.setEnabled(false);
    }
    
    //Event này giúp đánh dấu label đang được click bằng cách thêm số 1 ở cuối tên label
    private void addMouseEvent () {
        for(JLabel pn:listlbphongban) {
            pn.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    String strpn = pn.getText();
                    for (int i=0; i<listtenphongban.length; i++) {
                        //kiểm tra tên trên thẻ label được click có trùng khớp với phần tử chứa tên của chính nó không
                        //nếu đúng thì đổi số ở cuối tên phần tử từ 0 thành 1
                        if (strpn.equals(listtenphongban[i].substring(0, listtenphongban[i].length()-1))) 
                            //nếu đúng đổi status từ 0 thành 1 để biết rằng label này đang được click
                            listtenphongban[i] = listtenphongban[i].substring(0, listtenphongban[i].length()-1) + "1";
                            //nếu sai thì đổi số ở cuối tên phần tử từ 1 thành 0
                        else
                            listtenphongban[i] = listtenphongban[i].substring(0, listtenphongban[i].length()-1) + "0";
                    }
                    changeColor();
                    ButtonOn();
                }
            });
        }
        
        //event này đánh reset trạng thái của tất cả bảng dự án (chưa có bảng nào được click)
        pnDSPhongBan.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                for(String strlist:listtenphongban) 
                    strlist = strlist.substring(0, strlist.length()-1) + "0";
                for(JLabel pn:listlbphongban)
                    pn.setBackground(Color.gray);
                ButtonOff();
            }
        });
    }

    //</editor-fold>

    
    // <editor-fold defaultstate="collapsed" desc="Variables Declaration">   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame FrameDSNhanVien;
    private javax.swing.JButton btnSuaPhongBan;
    private javax.swing.JButton btnThemPhongBan;
    private javax.swing.JButton btnXemPhongBan;
    private javax.swing.JButton btnXoaPhongBan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbDSPhongBan;
    private javax.swing.JLabel lbMaPhong;
    private javax.swing.JLabel lbSDTPB;
    private javax.swing.JLabel lbTTPhongBan;
    private javax.swing.JLabel lbTenPhong;
    private javax.swing.JLabel lbTenPhong_DSNV;
    private javax.swing.JLabel lbTenTruongPhong;
    private javax.swing.JLabel lbtentruongphong;
    private javax.swing.JPanel pnDSPhongBan;
    private javax.swing.JPanel pnPhongBan;
    private javax.swing.JPanel pnTTPhongBan;
    private javax.swing.JScrollPane spDSNV;
    private javax.swing.JScrollPane spPhongBan;
    private javax.swing.JTable tbDSNV;
    private javax.swing.JTextField tfIDPhong;
    private javax.swing.JTextField tfIDTruongPhong;
    private javax.swing.JTextField tfSdtPhong;
    private javax.swing.JTextField tfTenPhong;
    private javax.swing.JTextField tfTenTruongPhong;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
