package GUI;


import BUS.NghiPhepBUS;
import BUS.NhanVienBUS;

import DTO.NghiPhepDTO;
import DTO.NhanVienDTO;
import java.text.ParseException;

import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;  
import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;

public class DonNghiPhepGUI extends javax.swing.JPanel {
    NghiPhepBUS npBUS = new NghiPhepBUS();
    NhanVienBUS NVBUS=new NhanVienBUS();
    ArrayList<NghiPhepDTO> arrNP;
    DefaultTableModel modelNP;
    DefaultTableModel modelNV;
    public DonNghiPhepGUI() {
        initComponents();
        rebuildFrame();
        modelNV=(DefaultTableModel) tbNVNP.getModel();
        modelNP = (DefaultTableModel) tbNP.getModel();
        loadListNP();
        loadListNhanVien();
        KhoiTaoBTN();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnDNP = new javax.swing.JPanel();
        pnDXNP = new javax.swing.JPanel();
        lbDXPN = new javax.swing.JLabel();
        lbTenNVNP = new javax.swing.JLabel();
        tfIDNV = new javax.swing.JTextField();
        lbLiDoNP = new javax.swing.JLabel();
        lbNgayBDNP = new javax.swing.JLabel();
        lbTongNgayNP = new javax.swing.JLabel();
        lbNgayKTNP = new javax.swing.JLabel();
        spLiDoVP = new javax.swing.JScrollPane();
        taLiDoNP = new javax.swing.JTextArea();
        tfTongNgayNP = new javax.swing.JTextField();
        btnThemNP = new javax.swing.JButton();
        btnSuaNP = new javax.swing.JButton();
        btnXoaNP = new javax.swing.JButton();
        pnTimKiemNP = new javax.swing.JPanel();
        lbTimKiemNP = new javax.swing.JLabel();
        tfTimKiemNP = new javax.swing.JTextField();
        spTimKiemNP = new javax.swing.JScrollPane();
        tbNP = new javax.swing.JTable();
        cbTimKiemNP = new javax.swing.JComboBox<>();
        dcNgaybatdauNP = new com.toedter.calendar.JDateChooser();
        dcNgayketthucNP = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbNVNP = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        tfTenNVNP = new javax.swing.JTextField();

        pnDXNP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnDXNPMousePressed(evt);
            }
        });

        lbDXPN.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        lbDXPN.setText("Đơn xin nghỉ phép");

        lbTenNVNP.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lbTenNVNP.setText("ID nhân viên");

        tfIDNV.setFont(new java.awt.Font("Segoe UI Light", 1, 13)); // NOI18N
        tfIDNV.setEnabled(false);
        tfIDNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfIDNVActionPerformed(evt);
            }
        });

        lbLiDoNP.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lbLiDoNP.setText("Lí do");

        lbNgayBDNP.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lbNgayBDNP.setText("Ngày bắt đầu");

        lbTongNgayNP.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lbTongNgayNP.setText("Tổng số ngày nghỉ");

        lbNgayKTNP.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        lbNgayKTNP.setText("Ngày kết thúc");

        taLiDoNP.setColumns(20);
        taLiDoNP.setLineWrap(true);
        taLiDoNP.setRows(5);
        spLiDoVP.setViewportView(taLiDoNP);

        tfTongNgayNP.setFont(new java.awt.Font("Segoe UI Light", 1, 13)); // NOI18N
        tfTongNgayNP.setEnabled(false);

        btnThemNP.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnThemNP.setText("Thêm");
        btnThemNP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemNPActionPerformed(evt);
            }
        });

        btnSuaNP.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnSuaNP.setText("Sửa");
        btnSuaNP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaNPActionPerformed(evt);
            }
        });

        btnXoaNP.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnXoaNP.setText("Xóa");
        btnXoaNP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaNPActionPerformed(evt);
            }
        });

        pnTimKiemNP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbTimKiemNP.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lbTimKiemNP.setText("Tìm kiếm");

        tfTimKiemNP.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        tfTimKiemNP.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                tfTimKiemNPCaretUpdate(evt);
            }
        });

        tbNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Tên nhân viên", "Ngày bắt đầu", "Ngày kết thúc"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbNP.setRowHeight(25);
        tbNP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbNPMousePressed(evt);
            }
        });
        spTimKiemNP.setViewportView(tbNP);

        cbTimKiemNP.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        cbTimKiemNP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "ID", "Tên nhân viên", "Ngày bắt đầu", "Ngày kết thúc" }));
        cbTimKiemNP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTimKiemNPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnTimKiemNPLayout = new javax.swing.GroupLayout(pnTimKiemNP);
        pnTimKiemNP.setLayout(pnTimKiemNPLayout);
        pnTimKiemNPLayout.setHorizontalGroup(
            pnTimKiemNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTimKiemNPLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lbTimKiemNP)
                .addGap(18, 18, 18)
                .addComponent(tfTimKiemNP, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbTimKiemNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(491, Short.MAX_VALUE))
            .addGroup(pnTimKiemNPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spTimKiemNP)
                .addContainerGap())
        );
        pnTimKiemNPLayout.setVerticalGroup(
            pnTimKiemNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTimKiemNPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTimKiemNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbTimKiemNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnTimKiemNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbTimKiemNP)
                        .addComponent(tfTimKiemNP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTimKiemNP, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dcNgaybatdauNP.setDateFormatString("yyyy-MM-dd");

        dcNgayketthucNP.setDateFormatString("yyyy-MM-dd");

        tbNVNP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID_Nhân viên", "Tên nhân viên"
            }
        ));
        tbNVNP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbNVNPMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tbNVNP);

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 1, 16)); // NOI18N
        jLabel1.setText("Tên nhân viên");

        tfTenNVNP.setEnabled(false);

        javax.swing.GroupLayout pnDXNPLayout = new javax.swing.GroupLayout(pnDXNP);
        pnDXNP.setLayout(pnDXNPLayout);
        pnDXNPLayout.setHorizontalGroup(
            pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDXNPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbDXPN)
                    .addGroup(pnDXNPLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbTenNVNP)
                            .addComponent(lbLiDoNP)
                            .addComponent(lbTongNgayNP)
                            .addComponent(lbNgayBDNP)
                            .addComponent(lbNgayKTNP)
                            .addComponent(jLabel1))
                        .addGap(23, 23, 23)
                        .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfIDNV, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tfTongNgayNP, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(spLiDoVP, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dcNgayketthucNP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tfTenNVNP, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dcNgaybatdauNP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnDXNPLayout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnDXNPLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(btnThemNP, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84)
                                .addComponent(btnSuaNP, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(81, 81, 81)
                                .addComponent(btnXoaNP, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(pnTimKiemNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(7, Short.MAX_VALUE))
        );
        pnDXNPLayout.setVerticalGroup(
            pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDXNPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnDXNPLayout.createSequentialGroup()
                        .addComponent(lbDXPN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbTenNVNP)
                            .addComponent(tfIDNV, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfTenNVNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dcNgaybatdauNP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbNgayBDNP))
                        .addGap(17, 17, 17)
                        .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnDXNPLayout.createSequentialGroup()
                                .addComponent(dcNgayketthucNP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfTongNgayNP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTongNgayNP)))
                            .addComponent(lbNgayKTNP)))
                    .addGroup(pnDXNPLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnDXNPLayout.createSequentialGroup()
                        .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spLiDoVP, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbLiDoNP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnDXNPLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnDXNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnThemNP)
                            .addComponent(btnSuaNP)
                            .addComponent(btnXoaNP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(pnTimKiemNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout pnDNPLayout = new javax.swing.GroupLayout(pnDNP);
        pnDNP.setLayout(pnDNPLayout);
        pnDNPLayout.setHorizontalGroup(
            pnDNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnDXNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnDNPLayout.setVerticalGroup(
            pnDNPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnDXNP, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnDNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnDNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void rebuildFrame() {
        
    }
    
    private void loadListNP(){
        try {
            modelNP.setRowCount(0);
            arrNP=npBUS.getAllNP();
            for (NghiPhepDTO np:arrNP) 
                if (np.visible == true) {
                    Vector row = new Vector();
                    row.add(np.id_nghiphep); 
                    row.add(np.tennhanvien); 
                    row.add(np.ngaybatdau); 
                    row.add(np.ngayketthuc);
                    modelNP.addRow(row);
                }
            tbNP.setModel(modelNP);
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
        public void loadListNhanVien(){
        modelNV.setRowCount(0);
        try {
            NVBUS.docDSNV();
        } catch (Exception ex) {
            Logger.getLogger(ViPhamGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i=0;i<NhanVienBUS.dsnv.size();i++){
            NhanVienDTO NV=NhanVienBUS.dsnv.get(i);
            String id_nhanvien=NV.getId();
            String tennhanvien=NV.getName();
            Object[] row={id_nhanvien,tennhanvien};
            modelNV.addRow(row);
        }
    }
    public void KhoiTaoBTN(){
        btnXoaNP.setEnabled(false);
        btnSuaNP.setEnabled(false);
    }
    private void resetForm() {
        tfIDNV.setText("");
        dcNgaybatdauNP.setCalendar(null);
        dcNgayketthucNP.setCalendar(null);
        tfTenNVNP.setText("");
        tfTongNgayNP.setText("");
        taLiDoNP.setText("");
        tbNP.getSelectionModel().clearSelection();
    }
    
    // <editor-fold defaultstate="collapsed" desc="Event Handling">   
    private void btnThemNPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemNPActionPerformed
        try{
        if(tfIDNV.getText().trim().equals("")||
           taLiDoNP.getText().trim().equals("")||
           tfTongNgayNP.getText().trim().equals("")||
           dcNgaybatdauNP.getDate() == null||
           dcNgayketthucNP.getDate() == null){
           JOptionPane.showMessageDialog(this,"Vui lòng nhập đủ thông tin");
        }else{
           NghiPhepDTO np = new NghiPhepDTO();
           SimpleDateFormat formatbd = new SimpleDateFormat("yyyy-MM-dd");
           SimpleDateFormat formatkt = new SimpleDateFormat("yyyy-MM-dd");
           String datebd = formatbd.format(dcNgaybatdauNP.getDate()).toString();
           String datekt = formatkt.format(dcNgayketthucNP.getDate()).toString();
           np.setId_nhanvien(tfIDNV.getText());
           np.setLydo(taLiDoNP.getText());
           np.setNgaybatdau(datebd);
           np.setNgayketthuc(datekt);
           int songay = Integer.parseInt(tfTongNgayNP.getText());
           np.setSongay(songay);
           JOptionPane.showMessageDialog(this, npBUS.addNP(np));
           loadListNP();
        }
        }catch(Exception ex){
        JOptionPane.showMessageDialog(this, "Thêm thất bại");
        }
    
    }//GEN-LAST:event_btnThemNPActionPerformed

    private void btnSuaNPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaNPActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbNP.getModel();
        int rowPos = tbNP.getSelectedRow();
        String idnp = model.getValueAt(rowPos, 0).toString();
        int idnp1 = Integer.parseInt(idnp);
        try {
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            NghiPhepDTO np = new NghiPhepDTO();
            np.setId_nghiphep(idnp1);
            np.setNgaybatdau(format.format(dcNgaybatdauNP.getDate()));
            np.setNgayketthuc(format.format(dcNgayketthucNP.getDate()));
            LocalDate d1 = LocalDate.parse(np.getNgaybatdau(), DateTimeFormatter.ISO_LOCAL_DATE);
            LocalDate d2 = LocalDate.parse(np.getNgayketthuc(), DateTimeFormatter.ISO_LOCAL_DATE);
            Duration diff = Duration.between(d1.atStartOfDay(), d2.atStartOfDay());
            long diffDays = diff.toDays();
            int days = Integer.parseInt(String.valueOf(diffDays));
            np.setSongay(days);
            np.setLydo(taLiDoNP.getText());
            new NghiPhepBUS().UpdateNP(np);
        //reset lại table
        for (int i = 0; i < model.getRowCount(); i++)
            model.removeRow(i);
        loadListNP();
        resetForm();
        } catch (Exception ex) {
            Logger.getLogger(DonNghiPhepGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSuaNPActionPerformed

    private void btnXoaNPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaNPActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbNP.getModel();
        int rowPos = tbNP.getSelectedRow();
        int index = 0;
        String idnp = model.getValueAt(rowPos, 0).toString();
        int idnp1 = Integer.parseInt(idnp);
        try {
        for (int i=0; i<NghiPhepBUS.dsnp.size(); i++) 
            if (idnp.equals(NghiPhepBUS.dsnp.get(i).id_nghiphep)) {
                index = i;
                break;
            }
        new NghiPhepBUS().DeleteNP(idnp1);
        //reset lại table
        for (int i=0; i<model.getRowCount(); i++)
            model.removeRow(i);
        loadListNP();
        resetForm();
        } catch (Exception ex) {
            Logger.getLogger(DonNghiPhepGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnXoaNPActionPerformed

    private void tfIDNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfIDNVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfIDNVActionPerformed

    private void cbTimKiemNPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTimKiemNPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTimKiemNPActionPerformed

    private void tfTimKiemNPCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_tfTimKiemNPCaretUpdate
        modelNP.setRowCount(0);
        try{
        if(!tfTimKiemNP.getText().trim().equals("")){
            String st=tfTimKiemNP.getText();
            int select=0;
            if(cbTimKiemNP.getSelectedItem().equals("ID")){
                    select=Integer.parseInt(tfTimKiemNP.getText());
                  arrNP=npBUS.TimKiemNghiPhepID(st,select,0);
                }
            if(cbTimKiemNP.getSelectedItem().equals("Tên nhân viên")){
                    arrNP=npBUS.TimKiemNghiPhepID(st,select,1);
            }
            if(cbTimKiemNP.getSelectedItem().equals("Ngày bắt đầu")){
                    arrNP=npBUS.TimKiemNghiPhepID(st,select,2);
            }
            if(cbTimKiemNP.getSelectedItem().equals("Ngày kết thúc")){
                    arrNP=npBUS.TimKiemNghiPhepID(st,select,3);
            }
            if(cbTimKiemNP.getSelectedItem().equals("Tất cả")){
                    try{
                        select=Integer.parseInt(tfTimKiemNP.getText());
                    }catch(NumberFormatException e){
                        select=0;
                    }
                    arrNP=npBUS.TimKiemNghiPhepID(st,select,4);           
            }
            for(int i = 0; i < arrNP.size(); i++){
                NghiPhepDTO np = arrNP.get(i);
                int idnp = np.getId_nghiphep();
                String tennv = np.getTennhanvien();
                String startdate = np.getNgaybatdau();
                String enddate = np.getNgayketthuc();
                Object[] row={idnp, tennv, startdate, enddate};
                modelNP.addRow(row);
            }
        }
        else{
            loadListNP();
        }
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_tfTimKiemNPCaretUpdate

    private void tbNVNPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbNVNPMousePressed
       tfTenNVNP.setText(tbNVNP.getValueAt(tbNVNP.getSelectedRow(),1)+"");
        tfIDNV.setText(tbNVNP.getValueAt(tbNVNP.getSelectedRow(),0)+"");
    }//GEN-LAST:event_tbNVNPMousePressed

    private void pnDXNPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnDXNPMousePressed
        KhoiTaoBTN();
        tbNP.getSelectionModel().clearSelection();
        tbNVNP.getSelectionModel().clearSelection();
        loadListNhanVien();
        resetForm();
    }//GEN-LAST:event_pnDXNPMousePressed

    private void tbNPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbNPMousePressed
        btnXoaNP.setEnabled(true);
        btnSuaNP.setEnabled(true);
        int id=(int) tbNP.getValueAt(tbNP.getSelectedRow(), 0);
        NghiPhepDTO NP= npBUS.getNPByID(id);
        Date dateBD = null;
        Date dateKT = null;
        try {
            dateBD = new SimpleDateFormat("yyyy-MM-dd").parse(NP.getNgaybatdau());
        } catch (ParseException ex) {
            Logger.getLogger(DonNghiPhepGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            dateKT = new SimpleDateFormat("yyyy-MM-dd").parse(NP.getNgayketthuc());
        } catch (ParseException ex) {
            Logger.getLogger(DonNghiPhepGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        tfIDNV.setText(NP.getId_nghiphep()+"");
        tfTenNVNP.setText(NP.getTennhanvien());
        taLiDoNP.setText(NP.getLydo());
        dcNgaybatdauNP.setDate(dateBD);
        dcNgayketthucNP.setDate(dateKT);
        tfTongNgayNP.setText(NP.getSongay()+"");
    }//GEN-LAST:event_tbNPMousePressed
    //</editor-fold>

    private boolean checkFieldNP(int choice) {
        if (choice == 1) {
            if (tfIDNV.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập mã nhân viên", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (dcNgaybatdauNP.getDate() == null) {
                JOptionPane.showMessageDialog(null, "Vui lòng chọn ngày sinh", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (dcNgaybatdauNP.getDate() == null) {
                JOptionPane.showMessageDialog(null, "Vui lòng chọn ngày sinh", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }if (dcNgayketthucNP.getDate() == null) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên nhân viên", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }if (taLiDoNP.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên nhân viên", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            SimpleDateFormat formatbd = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat formatkt = new SimpleDateFormat("yyyy-MM-dd");
            String bd = formatbd.format(dcNgaybatdauNP.getDate()).toString();
            String kt = formatkt.format(dcNgayketthucNP.getDate()).toString();  
            //Date datebd = new SimpleDateFormat("dd/MM/yyyy").parse(bd);
            //Date datekt = new SimpleDateFormat("dd/MM/yyyy").parse(kt);
            if (!tfIDNV.getText().trim().equals("") || !tfTongNgayNP.getText().trim().equals("") || !(dcNgaybatdauNP.getDate() == null) || !(dcNgayketthucNP.getDate() == null)) {
                //Số ngày nghỉ phải >= 1 
                try {
                    int songay = Integer.parseInt(tfTongNgayNP.getText());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Số ngày nghỉ không hợp lệ!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                if (!(Integer.parseInt(tfTongNgayNP.getText()) >= 1)) {
                    JOptionPane.showMessageDialog(null, "Ngày nghỉ phải lớn hơn không", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                //Kiểm tra ngày kết thúc phải lớn hơn hoặc bằng ngày bắt đầu
                /*if (!dcNgayketthucNP.getDate() < dcNgaybatdauNP.getDate()) {
                    JOptionPane.showMessageDialog(null, "Ngày kết thúc phải sau hay bằng ngày bắt đầu \n", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return false;
                }*/
            }
        }
        
        /*if (choice == 2) {
            if (tfTenNV.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên nhân viên", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (dcNgaySinh.getDate() == null) {
                JOptionPane.showMessageDialog(null, "Vui lòng chọn ngày sinh", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (tfCMND.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập số CMND", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (tfEmail.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập email", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (!tfIDNV.getText().trim().equals("") || !tfCMND.getText().trim().equals("") || !tfEmail.getText().trim().equals("")) {
                //kiểm tra tính hợp lệ của cmnd 
                try {
                    long cmnd = Long.parseLong(tfCMND.getText());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "CMND không hợp lệ!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                if (!(tfCMND.getText().length() == 12)) {
                    JOptionPane.showMessageDialog(null, "CMND không hợp lệ!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                //kiểm tra tính hợp lệ của email
                Matcher matcher = VALID_EMAIL_ADDRESS_REGEX.matcher(tfEmail.getText().trim());
                if (!matcher.find()) {
                    JOptionPane.showMessageDialog(null, "Email bị không hợp lệ\nVui lòng nhập lại Email!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                
                //kiểm tra trùng id, cmnd, email
                for (NhanVienDTO nv:NhanVienBUS.dsnv) {
                    //bỏ qua phần kiểm tra trùng nhân viên đang được chọn
                    if (!tfIDNV.getText().trim().equalsIgnoreCase(nv.id)) {
                        if (tfCMND.getText().trim().equalsIgnoreCase(nv.cmnd)) {
                            JOptionPane.showMessageDialog(null, "CMND bị trùng, vui lòng nhập lại!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                            return false;
                        }
                        if (tfEmail.getText().trim().equalsIgnoreCase(nv.email)) {
                            JOptionPane.showMessageDialog(null, "Email đã được sử dụng!!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                            return false;
                        }
                    }
                }
            }
        }*/
        return true;
    }
    
    // <editor-fold defaultstate="collapsed" desc="Variables Declaration">   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSuaNP;
    private javax.swing.JButton btnThemNP;
    private javax.swing.JButton btnXoaNP;
    private javax.swing.JComboBox<String> cbTimKiemNP;
    private com.toedter.calendar.JDateChooser dcNgaybatdauNP;
    private com.toedter.calendar.JDateChooser dcNgayketthucNP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbDXPN;
    private javax.swing.JLabel lbLiDoNP;
    private javax.swing.JLabel lbNgayBDNP;
    private javax.swing.JLabel lbNgayKTNP;
    private javax.swing.JLabel lbTenNVNP;
    private javax.swing.JLabel lbTimKiemNP;
    private javax.swing.JLabel lbTongNgayNP;
    private javax.swing.JPanel pnDNP;
    private javax.swing.JPanel pnDXNP;
    private javax.swing.JPanel pnTimKiemNP;
    private javax.swing.JScrollPane spLiDoVP;
    private javax.swing.JScrollPane spTimKiemNP;
    private javax.swing.JTextArea taLiDoNP;
    private javax.swing.JTable tbNP;
    private javax.swing.JTable tbNVNP;
    private javax.swing.JTextField tfIDNV;
    private javax.swing.JTextField tfTenNVNP;
    private javax.swing.JTextField tfTimKiemNP;
    private javax.swing.JTextField tfTongNgayNP;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
